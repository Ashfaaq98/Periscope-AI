from reportlab.pdfgen import canvas
import pefile
from capstone import *

# Function to perform advanced Static Analysis
def advancedStaticAnalysis(file):
    pe = pefile.PE(file)

    instructions = []

    binary_code = b'' 
    for section in pe.sections:
        binary_code += section.get_data()


    # initialize disassembler to disassemble 32 bit x86 binary code
    disassembler = Cs(CS_ARCH_X86, CS_MODE_32)

    # disassemble the code
    for instruction in disassembler.disasm(binary_code, 0x10000):
       instruction_name = instruction.op_str
       instructions.append(instruction_name)

    return instructions

# Function to perform static analysis
def staticanalysis(file):
    pe = pefile.PE(file)
    function_names =  []

    # list the DLLs a binary will load
    for entry in pe.DIRECTORY_ENTRY_IMPORT:

        for function in entry.imports:
            function_name = function.name
            function_names.append(function_name)

    return function_names

# Function to create pdf file
def create_pdf(file):

    output_path = 'results.pdf'

    with open(output_path, 'wb') as pdf_file:
        pdf = canvas.Canvas(pdf_file)
        pdf.setFont("Helvetica",16)
        pdf.drawString(200, 750, 'Analysis Results:')
        pdf.drawCentredString(200, 730, 'Sample is a Malware:')
        pdf.drawString(200, 710, '-------------------')
        pdf.drawString(200, 700, 'Static Analysis')

        # Add analysis results to the PDF
        y_position = 680  # Adjust the starting Y position for results
        analysis_results =  staticanalysis(file)
        
        for result in analysis_results:
            pdf.setFont("Helvetica",10)
            pdf.drawString(100, y_position, result)
            y_position -= 15  # Adjust the vertical spacing

        pdf.showPage()
        assemblyCode = advancedStaticAnalysis(file)
        
        pdf.drawString(200, 750, '-------------------')
        pdf.drawString(200, 730, 'Dissassembled Code')

        y_pos = 720
        for code in assemblyCode:
            pdf.setFont("Helvetica",10)
            pdf.drawString(100, y_pos, code)
            y_pos -=15
        pdf.save()

    return output_path

